#! /usr/bin/env ruby

require 'pg'
require 'date'
require 'io/console'
################################################################


class CLI
  def initialize()
    @application = ExpenseData.new()
  end

  def run(arguments)
    command = arguments.shift

    case command
    when "add"
      abort "You must provide an amount and memo" unless [2, 3].include?(arguments.size)
      @application.add_expense(*arguments[0,3])
    when "list"
      @application.list_expenses
    when "search"
      @application.search_expenses(arguments[0])
    when "delete"
      @application.delete_expense(arguments[0])
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      input = $stdin.getch
      
      @application.delete_all_expenses if input.downcase == 'y'
    else
      display_help
    end 
  end

  def display_help
    puts <<~HELP
      An expense recording system
  
      Commands:
  
      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

class ExpenseData
  def initialize()
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list_expenses
    result = @connection.exec "SELECT * FROM expenses ORDER BY created_on ASC"

    display_count(result)
    display_expenses(result) unless result.ntuples == 0
  end

  def search_expenses(search_term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = @connection.exec_params(sql, ["%#{search_term}%"])

    display_count(result)
    display_expenses(result) unless result.ntuples == 0
  end

  def add_expense(amount, memo, created_on = nil)
    created_on ||= Date.today.to_s
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    
    @connection.exec_params(sql, [amount, memo, created_on])
    puts "Expense added."
  end

  def delete_expense(id)
    q_sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(q_sql, [id])

    if result.ntuples == 1
      del_sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(del_sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "Expense id (#{id}) does not exist."
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  private

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
      SQL

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
            id SERIAL PRIMARY KEY,
            amount numeric(6, 2) NOT NULL CHECK (amount >= 0.01),
            memo text NOT NULL CHECK (LENGTH(memo) > 0),
            created_on date NOT NULL
            );
      SQL
    end
  end

  def display_expenses(result)
    result.each do |tuple|
      columns = [ tuple["id"].to_s.rjust(3),
                tuple["created_on"].rjust(10),
                tuple["amount"].rjust(12),
                tuple["memo"]
                ]
      puts columns.join(' | ')
    end

    puts "-" * 50

    amount_sum = result.field_values("amount").map(&:to_f).reduce(:+)

    puts "Total #{format('%.2f', amount_sum.to_f).rjust(25)}"
  end

  def display_count(expenses)
    count = expenses.ntuples
    case count
    when 0
      puts "There are no expenses"
    when 1
      puts "There is 1 expense"
    else
      puts "There are #{count} expenses."
    end
  end
end
################################################################

CLI.new().run(ARGV)



